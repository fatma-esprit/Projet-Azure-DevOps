trigger:
  - main

pool:
  name: Default
  demands:
    - Agent.Name -equals AgentSelfHostedDevops

variables:
  - group: TerraformSecrets  # ✅ Variables stockées dans Azure DevOps (pas utilisées ici mais tu peux les garder si besoin)
  - name: resourceGroupName
    value: 'rg-angular-app'
  - name: aksClusterName
    value: 'aks-cluster'
  - name: location
    value: 'East US'

stages:
- stage: Terraform
  displayName: 'Terraform Deployment using Azure CLI'
  jobs:
  - job: TerraformJob
    displayName: 'Execute Terraform Commands via Azure CLI'
    steps:
    - checkout: self

    - script: |
        echo "Vérification de Terraform installé dans l’agent..."
        terraform --version
      displayName: 'Check Terraform Installation'

    - script: |
        echo "Connexion Azure via Azure CLI sur l'agent..."
        az login
        az account set --subscription "2c8c9627-8263-4a24-be80-9748236b52c2"

        echo "Initialisation et déploiement Terraform via Azure CLI context..."
        cd terraform
        terraform init
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
      displayName: 'Terraform Init, Plan & Apply using Azure CLI'

- stage: DeployToAKS
  displayName: 'Deploy App to AKS'
  dependsOn: Terraform
  jobs:
  - job: Deploy
    displayName: 'Déploiement Angular vers AKS'
    steps:
    - checkout: self

    - script: |
        echo "Connexion à Azure via Azure CLI pour le déploiement AKS..."
        az login
        az account set --subscription "2c8c9627-8263-4a24-be80-9748236b52c2"
        az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
        echo "Déploiement des ressources avec deployment.yaml"
        kubectl apply -f deployment.yaml
      displayName: 'Deploy Angular App to AKS'
