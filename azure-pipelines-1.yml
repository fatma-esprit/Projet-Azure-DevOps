trigger:
  - main

pool:
  name: Default
  demands:
    - Agent.Name -equals AgentSelfHostedDevops  # Ici, on met bien le nom exact de ton agent

variables:
  azureServiceConnection: 'Terraform-MI'
  resourceGroupName: 'rg-angular-app'
  aksClusterName: 'aks-cluster'
  location: 'East US'

stages:
- stage: Terraform
  displayName: 'Terraform Deployment'
  jobs:
  - job: TerraformJob
    displayName: 'Execute Terraform Commands'
    steps:
    - checkout: self

    - script: |
        echo "Vérification de Terraform installé dans l’agent..."
        terraform --version
      displayName: 'Check Terraform Installation'

    - script: |
        echo "Initialisation et déploiement Terraform..."
        cd terraform
        terraform init
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan
      displayName: 'Terraform Init, Plan & Apply'

- stage: DeployToAKS
  displayName: 'Deploy App to AKS'
  dependsOn: Terraform
  jobs:
  - job: Deploy
    displayName: 'Déploiement Angular vers AKS'
    steps:
    - checkout: self

    - script: |
        echo "Authentification à Azure via Managed Identity..."
        az login --identity
        az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
        echo "Déploiement des ressources avec deployment.yaml"
        kubectl apply -f deployment.yaml
      displayName: 'Deploy Angular App to AKS'
