trigger:
  - main

pool:
  name: Default
  demands:
    - Agent.Name -equals AgentSelfHostedDevops

variables:
  - name: resourceGroupName
    value: 'cloud-shell-storage-westeurope'
  - name: aksClusterName
    value: 'aks-cluster'
  - name: location
    value: 'westeurope'

stages:
- stage: Terraform
  displayName: 'Terraform Deployment using Managed Identity'
  jobs:
  - job: TerraformJob
    displayName: 'Execute Terraform Commands with MI'
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      displayName: 'Install Terraform'

    - script: |
        echo "Vérification de Terraform installé dans l’agent..."
        terraform --version
      displayName: 'Check Terraform Installation'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init using Managed Identity'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Terraform-MI'
        backendAzureRmResourceGroupName: 'cloud-shell-storage-westeurope'
        backendAzureRmStorageAccountName: 'csb1003200318d650c5'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'Terraform-MI'
        additionalArgs: '-auto-approve'

- stage: DeployToAKS
  displayName: 'Deploy App to AKS'
  dependsOn: Terraform
  jobs:
  - job: Deploy
    displayName: 'Déploiement Angular vers AKS'
    steps:
    - checkout: self

    - script: |
        echo "Récupération des credentials du cluster AKS via Managed Identity..."
        az account show
        az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
        echo "Déploiement des ressources Kubernetes"
        kubectl apply -f deployment.yaml
      displayName: 'Deploy Angular App to AKS'
